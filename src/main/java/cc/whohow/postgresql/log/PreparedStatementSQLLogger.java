package cc.whohow.postgresql.log;

import cc.whohow.postgresql.proxy.AbstractProxyPreparedStatement;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class PreparedStatementSQLLogger extends AbstractProxyPreparedStatement {
    protected final SQLLogger logger;

    public PreparedStatementSQLLogger(PreparedStatement preparedStatement, SQLLogger logger) {
        super(preparedStatement);
        this.logger = logger;
    }

    @Override
    public ResultSet executeQuery() throws SQLException {
        logger.log(preparedStatement);
        return preparedStatement.executeQuery();
    }

    @Override
    public int executeUpdate() throws SQLException {
        logger.log(preparedStatement);
        return preparedStatement.executeUpdate();
    }

    @Override
    public boolean execute() throws SQLException {
        logger.log(preparedStatement);
        return preparedStatement.execute();
    }

    @Override
    public long executeLargeUpdate() throws SQLException {
        logger.log(preparedStatement);
        return preparedStatement.executeLargeUpdate();
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        logger.log(sql);
        return preparedStatement.executeQuery(sql);
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        logger.log(sql);
        return preparedStatement.executeUpdate(sql);
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        logger.log(sql);
        return preparedStatement.execute(sql);
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        logger.log(sql);
        preparedStatement.addBatch(sql);
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        logger.log(sql);
        return preparedStatement.executeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        logger.log(sql);
        return preparedStatement.executeUpdate(sql, columnIndexes);
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        logger.log(sql);
        return preparedStatement.executeUpdate(sql, columnNames);
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        logger.log(sql);
        return preparedStatement.execute(sql, autoGeneratedKeys);
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        logger.log(sql);
        return preparedStatement.execute(sql, columnIndexes);
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        logger.log(sql);
        return preparedStatement.execute(sql, columnNames);
    }

    @Override
    public long executeLargeUpdate(String sql) throws SQLException {
        logger.log(sql);
        return preparedStatement.executeLargeUpdate(sql);
    }

    @Override
    public long executeLargeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        logger.log(sql);
        return preparedStatement.executeLargeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public long executeLargeUpdate(String sql, int[] columnIndexes) throws SQLException {
        logger.log(sql);
        return preparedStatement.executeLargeUpdate(sql, columnIndexes);
    }

    @Override
    public long executeLargeUpdate(String sql, String[] columnNames) throws SQLException {
        logger.log(sql);
        return preparedStatement.executeLargeUpdate(sql, columnNames);
    }
}
