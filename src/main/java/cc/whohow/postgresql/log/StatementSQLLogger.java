package cc.whohow.postgresql.log;

import cc.whohow.postgresql.proxy.AbstractProxyStatement;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class StatementSQLLogger extends AbstractProxyStatement {
    protected final SQLLogger logger;

    public StatementSQLLogger(Statement statement, SQLLogger logger) {
        super(statement);
        this.logger = logger;
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        logger.log(sql);
        return statement.executeQuery(sql);
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        logger.log(sql);
        return statement.executeUpdate(sql);
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        logger.log(sql);
        return statement.execute(sql);
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        logger.log(sql);
        statement.addBatch(sql);
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        logger.log(sql);
        return statement.executeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        logger.log(sql);
        return statement.executeUpdate(sql, columnIndexes);
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        logger.log(sql);
        return statement.executeUpdate(sql, columnNames);
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        logger.log(sql);
        return statement.execute(sql, autoGeneratedKeys);
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        logger.log(sql);
        return statement.execute(sql, columnIndexes);
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        logger.log(sql);
        return statement.execute(sql, columnNames);
    }

    @Override
    public long executeLargeUpdate(String sql) throws SQLException {
        logger.log(sql);
        return statement.executeLargeUpdate(sql);
    }

    @Override
    public long executeLargeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        logger.log(sql);
        return statement.executeLargeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public long executeLargeUpdate(String sql, int[] columnIndexes) throws SQLException {
        logger.log(sql);
        return statement.executeLargeUpdate(sql, columnIndexes);
    }

    @Override
    public long executeLargeUpdate(String sql, String[] columnNames) throws SQLException {
        logger.log(sql);
        return statement.executeLargeUpdate(sql, columnNames);
    }
}
