package cc.whohow.postgresql.logging;

import cc.whohow.postgresql.proxy.WrapperPreparedStatement;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class LoggingPreparedStatement extends WrapperPreparedStatement {
    private static final Logger log = LogManager.getLogger("pg.sql.statement");

    public LoggingPreparedStatement(PreparedStatement preparedStatement) {
        super(preparedStatement);
    }

    @Override
    public ResultSet executeQuery() throws SQLException {
        log.debug(preparedStatement);
        return preparedStatement.executeQuery();
    }

    @Override
    public int executeUpdate() throws SQLException {
        log.debug(preparedStatement);
        return preparedStatement.executeUpdate();
    }

    @Override
    public boolean execute() throws SQLException {
        log.debug(preparedStatement);
        return preparedStatement.execute();
    }

    @Override
    public long executeLargeUpdate() throws SQLException {
        log.debug(preparedStatement);
        return preparedStatement.executeLargeUpdate();
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        log.debug(sql);
        return preparedStatement.executeQuery(sql);
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        log.debug(sql);
        return preparedStatement.executeUpdate(sql);
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        log.debug(sql);
        return preparedStatement.execute(sql);
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        log.debug(sql);
        preparedStatement.addBatch(sql);
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        log.debug(sql);
        return preparedStatement.executeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        log.debug(sql);
        return preparedStatement.executeUpdate(sql, columnIndexes);
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        log.debug(sql);
        return preparedStatement.executeUpdate(sql, columnNames);
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        log.debug(sql);
        return preparedStatement.execute(sql, autoGeneratedKeys);
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        log.debug(sql);
        return preparedStatement.execute(sql, columnIndexes);
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        log.debug(sql);
        return preparedStatement.execute(sql, columnNames);
    }

    @Override
    public long executeLargeUpdate(String sql) throws SQLException {
        log.debug(sql);
        return preparedStatement.executeLargeUpdate(sql);
    }

    @Override
    public long executeLargeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        log.debug(sql);
        return preparedStatement.executeLargeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public long executeLargeUpdate(String sql, int[] columnIndexes) throws SQLException {
        log.debug(sql);
        return preparedStatement.executeLargeUpdate(sql, columnIndexes);
    }

    @Override
    public long executeLargeUpdate(String sql, String[] columnNames) throws SQLException {
        log.debug(sql);
        return preparedStatement.executeLargeUpdate(sql, columnNames);
    }
}
